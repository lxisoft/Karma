/**
 * LoggedUser entity.
 * @author Muhammed Ruhail
 */
entity LoggedUser{
  email String,
  firstName String,
  lastName String,
  rating Long,
  description String,
  profession String,
  gender String,
  dob LocalDate,
  bloodGroup String,
  emotionalQuotient Long,
  socialQuotient Long,
  happinessIndex Long
}

/**
 * ApprovalStatus entity.
 * @author Sanil kumar
 */
entity ApprovalStatus{
  status String
}

/**
 * Address entity.
 * @author Neeraja
 */
entity Address{
  houseName String,
  place String,
  city String,
  state String,
  country String,
  zip Long  
}

/**
 * Media entity.
 * @author Dheeraj das.
 */
entity Media {
  fileName String,
  url String,
  extension String
}

/**
 * Category entity.
 * @author Dheeraj das.
 */
entity Category {
  name String,
  subCategory String
}

/**
*UserCheck entity
*@author Deepthi E
*/
entity UserCheck
{
  voteType String, 
  category String
}

/**
*Need entity
*@author Balagopal v
*/
entity Need{
  description String,
  beneficiaryType String,
  date Instant
}

/* Service entity
*@Author Sooraj Pn
*/
entity Help {
  time Instant,
  description String
}

/*
*@Author Anjali
*/
entity Severity{
  severityLevel String
}

/*
*@Author Sarangi Balu
*/
entity VerificationTeam {
  approvalLevel String
}

/**
*NewsFeed entity
*@author Deepthi E
*/
entity NewsFeed{         	
  description String,
  date Instant
}
 
/**
*Comment entity
*@author Deepthi E
*/
entity Comment{
  message String,
  date Instant
}
 
/**
*Reply  entity
*@author  Deepthi E
*/
entity  Reply{
  message String,
  date Instant
}
 
/**
*Violation entity
*@author Deepthi E
*/
entity  Violation{
  description String,
  isAnonymous Boolean,
  date Instant
}
 

relationship OneToOne{
  LoggedUser{profilePic} to Media
}

relationship OneToMany{
  LoggedUser{addresses} to Address,
  LoggedUser{needs} to Need{postedUser},
  LoggedUser{Helps} to Help{providedUser},
  Need{proofs} to Media,
  Help{proofs} to Media,
  Need{Helps} to Help{fulfilledNeed},
  Comment{replies}   to Reply, 
  NewsFeed{attachments}  to Media,
  Violation{proofs}  to Media,
  LoggedUser{newsFeeds} to NewsFeed{loggedUser},
  NewsFeed{comments} to Comment,
  Need{comments} to Comment,
  Help{comments} to Comment,
  Violation{comments} to Comment
}
  
relationship ManyToOne{
  Need{severity} to Severity{needs},
  Need{verificationTeam} to VerificationTeam{needs},
  Need{approvalStatus} to ApprovalStatus{needs},
  Help{approvalStatus} to ApprovalStatus{Helps},
  UserCheck{checkedNeed} to Need{userChecks},
  UserCheck{checkedUser} to LoggedUser{checkedNeeds},
  UserCheck{Comment}   to  Comment{userChecks},
  UserCheck{Reply}   to  Reply{userChecks},
  UserCheck{NewsFeed}  to  NewsFeed{userChecks},
  UserCheck{Violation}  to  Violation{userChecks},
  UserCheck{checkedHelp} to Help{userChecks},
  Comment{commentedUser} to LoggedUser,
  Reply{repliedUser} to LoggedUser
}

relationship ManyToMany{
  Need{categories} to Category{needs},
  VerificationTeam{approvingUsers} to LoggedUser{verificationTeams}
}

paginate * with pagination
dto * with mapstruct

// Set service options to all 
service all with serviceImpl 



